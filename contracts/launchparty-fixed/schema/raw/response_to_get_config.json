{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "creator",
    "metadata",
    "next_token_id",
    "party_type",
    "price",
    "referral_fee_bps",
    "seller_fee_bps",
    "start_time",
    "symbol"
  ],
  "properties": {
    "bs721_metadata": {
      "description": "Address of the bs721 token contract.",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "bs721_royalties": {
      "description": "Address of the bs721 royalties contract.",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "creator": {
      "description": "Creator of the collection. If not provided it will be the sender.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "max_per_address": {
      "description": "Maximum amount of token an address can mint.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "metadata": {
      "description": "On-chain Metadata",
      "allOf": [
        {
          "$ref": "#/definitions/Metadata"
        }
      ]
    },
    "next_token_id": {
      "description": "ID that will be associated to the next NFT minted.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "party_type": {
      "description": "End condition of the collection launchparty.",
      "allOf": [
        {
          "$ref": "#/definitions/PartyType"
        }
      ]
    },
    "price": {
      "description": "Price of single nft minting.",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    },
    "referral_fee_bps": {
      "description": "BPS of the token price associated to the referral address.",
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "seller_fee_bps": {
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "start_time": {
      "description": "Start time of the launchparty.",
      "allOf": [
        {
          "$ref": "#/definitions/Timestamp"
        }
      ]
    },
    "symbol": {
      "description": "BS721 token symbol.",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MediaType": {
      "type": "string",
      "enum": [
        "image",
        "audio",
        "video"
      ]
    },
    "Metadata": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "animation_url": {
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "background_color": {
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "type": "string"
        },
        "external_url": {
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "type": [
            "string",
            "null"
          ]
        },
        "media_type": {
          "anyOf": [
            {
              "$ref": "#/definitions/MediaType"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "PartyType": {
      "description": "Possible launchparty type. Each type defines how the party end.",
      "oneOf": [
        {
          "description": "Maximum number of mintable tokens.",
          "type": "object",
          "required": [
            "max_edition"
          ],
          "properties": {
            "max_edition": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Number of blocks for which tokens are mintable.",
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Trait": {
      "type": "object",
      "required": [
        "trait_type",
        "value"
      ],
      "properties": {
        "display_type": {
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
