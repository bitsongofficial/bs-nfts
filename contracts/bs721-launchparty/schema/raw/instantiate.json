{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "Structure required by the launchparty-fixed contract during its instantiation.",
  "type": "object",
  "required": [
    "bs721_admin",
    "bs721_code_id",
    "name",
    "party_type",
    "payment_address",
    "price",
    "protocol_fee_bps",
    "referral_fee_bps",
    "seller_fee_bps",
    "start_time",
    "symbol",
    "uri"
  ],
  "properties": {
    "bs721_admin": {
      "type": "string"
    },
    "bs721_code_id": {
      "description": "Code id used to instantiate a bs721 metadata onchain token contract.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "max_per_address": {
      "description": "Maximum amount of tokens an address can mint.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint32",
      "minimum": 0.0
    },
    "name": {
      "description": "BS721 token name.",
      "type": "string"
    },
    "party_type": {
      "description": "End condition of the collection launchparty.",
      "allOf": [
        {
          "$ref": "#/definitions/PartyType"
        }
      ]
    },
    "payment_address": {
      "description": "Payment address for the royalties.",
      "type": "string"
    },
    "price": {
      "description": "Price of single nft minting.",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    },
    "protocol_fee_bps": {
      "description": "Basis per point of the `price` sent to the community pool during mint or burn.",
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "referral_fee_bps": {
      "description": "Basis per point of the `price` sent to the referred address during mint or burn.",
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "seller_fee_bps": {
      "description": "Basis per point of the `price` sent to the royalties address during mint or burn.",
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "start_time": {
      "description": "Start time of the launchparty.",
      "allOf": [
        {
          "$ref": "#/definitions/Timestamp"
        }
      ]
    },
    "symbol": {
      "description": "BS721 token symbol.",
      "type": "string"
    },
    "uri": {
      "description": "BS721 Uri",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "PartyType": {
      "description": "Possible launchparty type. Each type defines how the party end.",
      "oneOf": [
        {
          "description": "Maximum number of mintable tokens.",
          "type": "object",
          "required": [
            "max_edition"
          ],
          "properties": {
            "max_edition": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Number of seconds after the launchparty start_time.",
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
