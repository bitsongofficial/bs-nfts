{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Get the current ask for specific name",
      "type": "object",
      "required": [
        "ask"
      ],
      "properties": {
        "ask": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all asks for a collection",
      "type": "object",
      "required": [
        "asks"
      ],
      "properties": {
        "asks": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Count of all asks",
      "type": "object",
      "required": [
        "ask_count"
      ],
      "properties": {
        "ask_count": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all asks by seller",
      "type": "object",
      "required": [
        "asks_by_seller"
      ],
      "properties": {
        "asks_by_seller": {
          "type": "object",
          "required": [
            "seller"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "seller": {
              "type": "string"
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all renewable Asks Get data for a specific bid",
      "type": "object",
      "required": [
        "bid"
      ],
      "properties": {
        "bid": {
          "type": "object",
          "required": [
            "bidder",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all bids by a bidder",
      "type": "object",
      "required": [
        "bids_by_bidder"
      ],
      "properties": {
        "bids_by_bidder": {
          "type": "object",
          "required": [
            "bidder"
          ],
          "properties": {
            "bidder": {
              "type": "string"
            },
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all bids for a specific NFT",
      "type": "object",
      "required": [
        "bids"
      ],
      "properties": {
        "bids": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "type": [
                "string",
                "null"
              ]
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all bids for a collection, sorted by price",
      "type": "object",
      "required": [
        "bids_sorted_by_price"
      ],
      "properties": {
        "bids_sorted_by_price": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffset"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all bids for a collection, sorted by price in reverse",
      "type": "object",
      "required": [
        "reverse_bids_sorted_by_price"
      ],
      "properties": {
        "reverse_bids_sorted_by_price": {
          "type": "object",
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_before": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffset"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get all bids for a specific account",
      "type": "object",
      "required": [
        "bids_for_seller"
      ],
      "properties": {
        "bids_for_seller": {
          "type": "object",
          "required": [
            "seller"
          ],
          "properties": {
            "limit": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "seller": {
              "type": "string"
            },
            "start_after": {
              "anyOf": [
                {
                  "$ref": "#/definitions/BidOffset"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get the highest bid for a name",
      "type": "object",
      "required": [
        "highest_bid"
      ],
      "properties": {
        "highest_bid": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Show all registered ask hooks",
      "type": "object",
      "required": [
        "ask_hooks"
      ],
      "properties": {
        "ask_hooks": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Show all registered bid hooks",
      "type": "object",
      "required": [
        "bid_hooks"
      ],
      "properties": {
        "bid_hooks": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Show all registered sale hooks",
      "type": "object",
      "required": [
        "sale_hooks"
      ],
      "properties": {
        "sale_hooks": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get the config for the contract",
      "type": "object",
      "required": [
        "params"
      ],
      "properties": {
        "params": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Get the renewal queue for a specific time Get the minter and collection",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "BidOffset": {
      "description": "Offset for bid pagination",
      "type": "object",
      "required": [
        "bidder",
        "price",
        "token_id"
      ],
      "properties": {
        "bidder": {
          "$ref": "#/definitions/Addr"
        },
        "price": {
          "$ref": "#/definitions/Uint128"
        },
        "token_id": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
