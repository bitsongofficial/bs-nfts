{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "ask_interval",
    "max_renewals_per_block",
    "min_price",
    "operator",
    "renew_window",
    "renewal_bid_percentage",
    "trading_fee_bps",
    "valid_bid_query_limit"
  ],
  "properties": {
    "ask_interval": {
      "description": "Interval to rate limit setting asks (in seconds)",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "max_renewals_per_block": {
      "description": "The maximum number of renewals that can be processed in each block",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "min_price": {
      "description": "Min value for bids and asks",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "operator": {
      "description": "The address with permission to invoke process_renewals",
      "type": "string"
    },
    "renew_window": {
      "description": "The number of seconds before the current block time that a bid must have been created in order to be considered valid. Also, the number of seconds before an ask expires where it can be renewed.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "renewal_bid_percentage": {
      "description": "The percentage of the winning bid that must be paid to renew a name",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "trading_fee_bps": {
      "description": "Community pool fee for winning bids 0.25% = 25, 0.5% = 50, 1% = 100, 2.5% = 250",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "valid_bid_query_limit": {
      "description": "The number of bids to query to when searching for the highest bid",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
